{"version":3,"file":"mapbox-layerswitcher.min.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/utils/defaultValue.js","../src/template/SimpleSwitcher1.js","../src/template/SimpleSwitcher2.js","../src/template/TreeSwitcher1.js","../src/core/MapboxLayerSwitcher.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","/**\r\n * Returns the first parameter if not undefined, otherwise the second parameter.\r\n * Useful for setting a default value for a parameter.\r\n *\r\n * @function\r\n *\r\n * @param {*} a\r\n * @param {*} b\r\n * @returns {*} Returns the first parameter if not undefined, otherwise the second parameter.\r\n *\r\n * @example\r\n * param = Cesium.defaultValue(param, 'default');\r\n */\r\n function defaultValue(a, b) {\r\n    if (a !== undefined && a !== null) {\r\n      return a;\r\n    }\r\n    return b;\r\n  }\r\n  \r\n  /**\r\n   * A frozen empty object that can be used as the default value for options passed as\r\n   * an object literal.\r\n   * @type {Object}\r\n   * @memberof defaultValue\r\n   */\r\n  defaultValue.EMPTY_OBJECT = Object.freeze({});\r\n  \r\n  export default defaultValue;","class SimpleSwitcher1 {\r\n    constructor(map, container, layers, activemode) {\r\n        this._map = map;\r\n        this._container = container;\r\n        this._layers = layers;\r\n        this._activemode = activemode;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        if (!this._layers) return;\r\n\r\n        this._container.className = 'mapboxgl-ctrl';\r\n\r\n        this._panel = document.createElement('nav');\r\n        this._panel.id = 'ml-panel-1';\r\n        this._panel.className = 'ml-panel-1';\r\n        this._panelContentStr = '';\r\n\r\n        if (this._activemode !== 'none') {\r\n            this.createLayerSwitcherBtn();\r\n        }\r\n\r\n        this.layersClassify();\r\n\r\n        this.createOverlaysPanel();\r\n        this.createBasemapsPanel();\r\n\r\n        this._panel.innerHTML = this._panelContentStr;\r\n        this._container.appendChild(this._panel);\r\n\r\n        this.addPanelEvent();\r\n    }\r\n\r\n    /**\r\n     * 将layers划分成overlays和basemaps两个数组中，便于分类管理\r\n     */\r\n    layersClassify() {\r\n        this._overlays = [];\r\n        this._basemaps = [];\r\n\r\n        let layers = this._layers;\r\n\r\n        for (let i = 0; i < layers.length; i++) {\r\n            let layer = layers[i];\r\n            let { type } = layer;\r\n\r\n            if (type === 'base') {\r\n                this._basemaps.push(layer);\r\n            } else {\r\n                this._overlays.push(layer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建图层选择器控件\r\n     */\r\n    createLayerSwitcherBtn() {\r\n        this._layerSwitcherBtn = document.createElement('button');\r\n        this._layerSwitcherBtn.className = 'ml-layerSwitcherBtn';\r\n\r\n        switch (this._activemode) {\r\n            case 'click':\r\n                this.layerSwitcherBtnClicKMode();\r\n                break;\r\n            case 'mouseover':\r\n                this.layerSwitcherBtnMouseOverMode();\r\n                break;\r\n        }\r\n    }\r\n\r\n    layerSwitcherBtnClicKMode() {\r\n        this._layerSwitcherBtn.addEventListener('click', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis === 'none') {\r\n                this._panel.setAttribute('style', 'display:block');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:none');\r\n            }\r\n        })\r\n\r\n        this._map.on('click', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis !== 'none') {\r\n                this._panel.setAttribute('style', 'display:none');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:block');\r\n            }\r\n        })\r\n\r\n        this._panel.setAttribute('style', 'display:none');\r\n        this._container.appendChild(this._layerSwitcherBtn);\r\n    }\r\n\r\n    layerSwitcherBtnMouseOverMode() {\r\n        this._layerSwitcherBtn.addEventListener('mouseenter', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis === 'none') {\r\n                this._panel.setAttribute('style', 'display:block');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:none');\r\n            }\r\n        })\r\n\r\n        this._panel.addEventListener('mouseleave', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis !== 'none') {\r\n                this._panel.setAttribute('style', 'display:none');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:block');\r\n            }\r\n        })\r\n\r\n        this._panel.setAttribute('style', 'display:none');\r\n        this._container.appendChild(this._layerSwitcherBtn);\r\n    }\r\n\r\n    /**\r\n     * 创建basemap图层面板\r\n     */\r\n    createBasemapsPanel() {\r\n        let basemaps = this._basemaps;\r\n\r\n        for (let i = 0; i < basemaps.length; i++) {\r\n            let { id, name, type } = basemaps[i];\r\n            this._panelContentStr +=\r\n                `<input type='radio' id='${id}' layertype='${type}' name='${type}' checked='checked' />\r\n                <label for='${id}' class='textnoselect'>${name ? name : id}</label>`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建overlays图层面板\r\n     */\r\n    createOverlaysPanel() {\r\n        this._checked = {};\r\n        let overlays = this._overlays;\r\n\r\n        for (let i = 0; i < overlays.length; i++) {\r\n            let { id, name, type } = overlays[i];\r\n\r\n            this._panelContentStr +=\r\n                `<input type='checkbox' id='${id}' layertype='${type ? type : ''}' checked='checked' />\r\n                <label for='${id}' class='textnoselect'>${name ? name : id}</label>`;\r\n\r\n            this._checked[id] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 给图层面板添加点击事件\r\n     */\r\n    addPanelEvent() {\r\n        this._map.once('load', () => {\r\n            document.getElementById('ml-panel-1').addEventListener('change', e => {\r\n                let type = e.target.attributes.layertype.nodeValue;\r\n\r\n                if (type === 'base') {// base layers\r\n                    this.changeBaseMap(e);\r\n                } else { // Overlay layers\r\n                    this.changeOverlaysVisible(e);\r\n                }\r\n\r\n                this._map._update();\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 切换basemap\r\n     * @param {Event} e \r\n     */\r\n    changeBaseMap(e) {\r\n        let mapstyle = e.target.id;\r\n        this._map.setStyle(mapstyle);\r\n\r\n        this._map.on('style.load', () => {\r\n            for (let layerId in this._checked) {\r\n                let visibility = this._checked[layerId] ? 'visible' : 'none';\r\n                this._map.setLayoutProperty(layerId, 'visibility', visibility);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 改变overlay图层显隐性\r\n     * @param {Event} e \r\n     */\r\n    changeOverlaysVisible(e) {\r\n        let layerId = e.target.id;\r\n\r\n        if (e.target.checked) {\r\n            this._map.setLayoutProperty(layerId, 'visibility', 'visible');\r\n            this._checked[layerId] = true;\r\n        } else {\r\n            this._map.setLayoutProperty(layerId, 'visibility', 'none');\r\n            this._checked[layerId] = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default SimpleSwitcher1;","class SimpleSwitcher2 {\r\n    constructor(map, container, layers, activemode) {\r\n        this._map = map;\r\n        this._container = container;\r\n        this._layers = layers;\r\n        this._activemode = activemode;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        if (!this._layers) return;\r\n\r\n        this._container.className = 'mapboxgl-ctrl';\r\n\r\n        this._panel = document.createElement('nav');\r\n        this._panel.id = 'ml-panel-2';\r\n        this._panel.className = 'ml-panel-2';\r\n        this._panelContentStr = '';\r\n\r\n        if (this._activemode !== 'none') {\r\n            this.createLayerSwitcherBtn();\r\n        }\r\n\r\n        this.layersClassify();\r\n\r\n        this.createOverlaysPanel();\r\n        this.createBasemapsPanel();\r\n\r\n        this._panel.innerHTML = this._panelContentStr;\r\n        this._container.appendChild(this._panel);\r\n\r\n        this.addPanelEvent();\r\n    }\r\n\r\n    /**\r\n     * 将layers划分成overlays和basemaps两个数组中，便于分类管理\r\n     */\r\n    layersClassify() {\r\n        this._overlays = [];\r\n        this._basemaps = [];\r\n\r\n        let layers = this._layers;\r\n\r\n        for (let i = 0; i < layers.length; i++) {\r\n            let layer = layers[i];\r\n            let { type } = layer;\r\n\r\n            if (type === 'base') {\r\n                this._basemaps.push(layer);\r\n            } else {\r\n                this._overlays.push(layer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建图层选择器控件\r\n     */\r\n    createLayerSwitcherBtn() {\r\n        this._layerSwitcherBtn = document.createElement('button');\r\n        this._layerSwitcherBtn.className = 'ml-layerSwitcherBtn';\r\n\r\n        switch (this._activemode) {\r\n            case 'click':\r\n                this.layerSwitcherBtnClicKMode();\r\n                break;\r\n            case 'mouseover':\r\n                this.layerSwitcherBtnMouseOverMode();\r\n                break;\r\n        }\r\n    }\r\n\r\n    layerSwitcherBtnClicKMode() {\r\n        this._layerSwitcherBtn.addEventListener('click', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis === 'none') {\r\n                this._panel.setAttribute('style', 'display:block');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:none');\r\n            }\r\n        })\r\n\r\n        this._map.on('click', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis !== 'none') {\r\n                this._panel.setAttribute('style', 'display:none');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:block');\r\n            }\r\n        })\r\n\r\n        this._panel.setAttribute('style', 'display:none');\r\n        this._container.appendChild(this._layerSwitcherBtn);\r\n    }\r\n\r\n    layerSwitcherBtnMouseOverMode() {\r\n        this._layerSwitcherBtn.addEventListener('mouseenter', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis === 'none') {\r\n                this._panel.setAttribute('style', 'display:block');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:none');\r\n            }\r\n        })\r\n\r\n        this._panel.addEventListener('mouseleave', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis !== 'none') {\r\n                this._panel.setAttribute('style', 'display:none');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:block');\r\n            }\r\n        })\r\n\r\n        this._panel.setAttribute('style', 'display:none');\r\n        this._container.appendChild(this._layerSwitcherBtn);\r\n    }\r\n\r\n    /**\r\n     * 创建basemap图层面板\r\n     */\r\n    createBasemapsPanel() {\r\n        let basemaps = this._basemaps;\r\n        // let curStyle = this._map;\r\n\r\n        for (let i = 0; i < basemaps.length; i++) {\r\n            let { id, name, type } = basemaps[i];\r\n            this._panelContentStr +=\r\n                `<a id='${id}' name='base' href='#' class='${i === 0 ? 'active' : ''}' layertype='${type ? type : ''}'>${name ? name : id}</a>`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建overlays图层面板\r\n     */\r\n    createOverlaysPanel() {\r\n        this._checked = {};\r\n        let overlays = this._overlays;\r\n\r\n        for (let i = 0; i < overlays.length; i++) {\r\n            let { id, name, type } = overlays[i];\r\n\r\n            this._panelContentStr +=\r\n                `<a id='${id}' href='#' class='active' layertype='${type ? type : ''}'>${name ? name : id}</a>`;\r\n\r\n            this._checked[id] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 给图层面板添加点击事件\r\n     */\r\n    addPanelEvent() {\r\n        this._map.once('load', () => {\r\n            document.getElementById('ml-panel-2').addEventListener('click', e => {\r\n                let type = e.target.attributes.layertype.nodeValue;\r\n\r\n                if (type === 'base') {// base layers\r\n                    this.changeBaseMap(e);\r\n                } else { // Overlay layers\r\n                    this.changeOverlaysVisible(e);\r\n                }\r\n\r\n                this._map._update();\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    /**\r\n     * 切换basemap\r\n     * @param {Event} e \r\n     */\r\n    changeBaseMap(e) {\r\n        let mapstyle = e.target.id;\r\n        this._map.setStyle(mapstyle, { diff: false }); // todo: 此处有性能损失，待评估\r\n\r\n        let alinkArrLike = e.target.parentNode.children;\r\n        for (let i = 0; i < alinkArrLike.length; i++) {\r\n            if (alinkArrLike[i].name !== 'base') continue;\r\n\r\n            if (alinkArrLike[i].id !== mapstyle) {\r\n                alinkArrLike[i].className = '';\r\n            } else {\r\n                alinkArrLike[i].className = 'active';\r\n            }\r\n        }\r\n\r\n        this._map.once('style.load', () => {\r\n            for (let layerId in this._checked) {\r\n                let visibility = this._checked[layerId] ? 'visible' : 'none';\r\n                this._map.setLayoutProperty(layerId, 'visibility', visibility);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 改变overlay图层显隐性\r\n     * @param {Event} e \r\n     */\r\n    changeOverlaysVisible(e) {\r\n        let layerId = e.target.id;\r\n        let alink = document.getElementById(layerId);\r\n\r\n        if (!this._checked[layerId]) {\r\n            this._map.setLayoutProperty(layerId, 'visibility', 'visible');\r\n            alink.className = 'active';\r\n            this._checked[layerId] = true;\r\n        } else {\r\n            this._map.setLayoutProperty(layerId, 'visibility', 'none');\r\n            alink.className = '';\r\n            this._checked[layerId] = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default SimpleSwitcher2;","class TreeSwitcher1 {\r\n    constructor(map, container, layers, activemode) {\r\n        this._map = map;\r\n        this._container = container;\r\n        this._layers = layers;\r\n        this._activemode = activemode;\r\n\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        if (!this._layers) return;\r\n\r\n        this._container.className = 'mapboxgl-ctrl';\r\n\r\n        this._panel = document.createElement('div');\r\n        this._panel.id = 'ml-panel-tree1';\r\n        this._panel.className = 'ml-panel-tree1';\r\n\r\n        this._panelContent = document.createElement('ul');\r\n        this._panelContent.name = 'ml-parentul';\r\n\r\n        if (this._activemode !== 'none') {\r\n            this.createLayerSwitcherBtn();\r\n        }\r\n\r\n        this.layersClassify();\r\n\r\n        this.createOverlaysPanel();\r\n        this.createBasemapsPanel();\r\n\r\n        this._panel.appendChild(this._panelContent);\r\n        this._container.appendChild(this._panel);\r\n\r\n        this.addBasemapEvent();\r\n        this.addOverlaysEvent();\r\n    }\r\n\r\n    /**\r\n     * 将layers划分成overlays和basemaps两个数组中，便于分类管理\r\n     */\r\n    layersClassify() {\r\n        this._overlays = [];\r\n        this._basemaps = [];\r\n\r\n        let layers = this._layers;\r\n\r\n        for (let i = 0; i < layers.length; i++) {\r\n            let layer = layers[i];\r\n            let { type } = layer;\r\n            if (type === 'base') {\r\n                this._basemaps.push(layer);\r\n            } else {\r\n                this._overlays.push(layer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建图层选择器控件\r\n     */\r\n    createLayerSwitcherBtn() {\r\n        this._layerSwitcherBtn = document.createElement('button');\r\n        this._layerSwitcherBtn.className = 'ml-layerSwitcherBtn';\r\n\r\n        switch (this._activemode) {\r\n            case 'click':\r\n                this.layerSwitcherBtnClicKMode();\r\n                break;\r\n            case 'mouseover':\r\n                this.layerSwitcherBtnMouseOverMode();\r\n                break;\r\n        }\r\n    }\r\n\r\n    layerSwitcherBtnClicKMode() {\r\n        this._layerSwitcherBtn.addEventListener('click', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis === 'none') {\r\n                this._panel.setAttribute('style', 'display:block');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:none');\r\n            }\r\n        })\r\n\r\n        this._map.on('click', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis !== 'none') {\r\n                this._panel.setAttribute('style', 'display:none');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:block');\r\n            }\r\n        })\r\n\r\n        this._panel.setAttribute('style', 'display:none');\r\n        this._container.appendChild(this._layerSwitcherBtn);\r\n    }\r\n\r\n    layerSwitcherBtnMouseOverMode() {\r\n        this._layerSwitcherBtn.addEventListener('mouseenter', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis === 'none') {\r\n                this._panel.setAttribute('style', 'display:block');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:none');\r\n            }\r\n        })\r\n\r\n        this._panel.addEventListener('mouseleave', () => {\r\n            let panelVis = this._panel.style.display;\r\n            if (panelVis !== 'none') {\r\n                this._panel.setAttribute('style', 'display:none');\r\n                this._layerSwitcherBtn.setAttribute('style', 'display:block');\r\n            }\r\n        })\r\n\r\n        this._panel.setAttribute('style', 'display:none');\r\n        this._container.appendChild(this._layerSwitcherBtn);\r\n    }\r\n\r\n    /**\r\n     * 创建basemap图层面板\r\n     */\r\n    createBasemapsPanel() {\r\n        let basemaps = this._basemaps;\r\n        let len = basemaps.length;\r\n\r\n        if (len > 0) {\r\n            let li = document.createElement('li');\r\n            li.className = 'ml-basemap-group';\r\n            li.id = 'ml-basemap-group';\r\n            let label = document.createElement('label');\r\n            label.innerText = 'Base maps';\r\n            label.className = 'ml-basemap-group-label'\r\n            li.appendChild(label);\r\n\r\n            this._panelContent.appendChild(li);\r\n\r\n            let ul = document.createElement('ul');\r\n            let listr = '';\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let { id, name, type } = basemaps[i];\r\n                listr +=\r\n                    `<li class='ml-basemap-layer'>\r\n                        <input type='radio' name='ml-${type}map-radio' id='${id}' checked='${i === 0 ? 'checked' : ''}'/>\r\n                        <label for='${type}'>${name ? name : id}</label>\r\n                    </li>`;\r\n            }\r\n\r\n            ul.innerHTML = listr;\r\n            li.appendChild(ul);\r\n\r\n            this._panelContent.appendChild(li);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 初始化overlays图层面板\r\n     */\r\n    createOverlaysPanel() {\r\n        this._checked = {};\r\n        let overlays = this._overlays;\r\n        let len = overlays.length;\r\n\r\n        if (len > 0) {\r\n            let li = document.createElement('li');\r\n            li.className = 'ml-overlay-group';\r\n            li.id = 'ml-overlay-group';\r\n\r\n            let button = document.createElement('button');\r\n            button.addEventListener('click', e => {\r\n                let btnClassname = e.target.className;\r\n                if (btnClassname.includes('ml-menu-button-close')) {\r\n                    e.target.className = '';\r\n                    li.classList.remove('ml-menu-close');\r\n                } else {\r\n                    e.target.className = 'ml-menu-button-close';\r\n                    li.classList.add('ml-menu-close');\r\n                }\r\n\r\n            })\r\n\r\n            let input = document.createElement('input');\r\n            input.type = 'checkbox';\r\n            input.id = 'ml-layergroup-checkbox';\r\n            input.checked = 'checked';\r\n\r\n            let label = document.createElement('label');\r\n            label.innerText = 'Overlays';\r\n            label.className = 'ml-overlay-group-label'\r\n            label.for = 'ml-layergroup-checkbox';\r\n\r\n            li.appendChild(button);\r\n            li.appendChild(input);\r\n            li.appendChild(label);\r\n\r\n            this._panelContent.appendChild(li);\r\n\r\n            this.createSubTreeNode(overlays, li);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 递归实现overlays面板各父子节点创建\r\n     * @param {Array} overlays - overlays图层数组\r\n     * @param {HTMLElement} parentli - li元素节点\r\n     */\r\n    createSubTreeNode(overlays, parentli) {\r\n        let len = overlays.length;\r\n\r\n        let ul = document.createElement('ul');\r\n        ul.name = 'ml-parentul';\r\n\r\n        for (let i = 0; i < len; i++) {\r\n            let overlay = overlays[i];\r\n            let { id, name, children } = overlay;\r\n\r\n            if (children) {\r\n                let li = document.createElement('li');\r\n                li.className = 'ml-overlay-group';\r\n\r\n                let button = document.createElement('button');\r\n                button.addEventListener('click', e => {\r\n                    let btnClassname = e.target.className;\r\n                    if (btnClassname.includes('ml-menu-button-close')) {\r\n                        e.target.className = '';\r\n                        li.classList.remove('ml-menu-close');\r\n                    } else {\r\n                        e.target.className = 'ml-menu-button-close';\r\n                        li.classList.add('ml-menu-close');\r\n                    }\r\n                })\r\n\r\n                let input = document.createElement('input');\r\n                input.type = 'checkbox';\r\n                input.name = 'ml-layergroup-checkbox';\r\n                input.checked = 'checked';\r\n\r\n                let label = document.createElement('label');\r\n                label.className = 'ml-overlay-group-label';\r\n                label.innerText = name ? name : id;\r\n\r\n                li.appendChild(button);\r\n                li.appendChild(input);\r\n                li.appendChild(label);\r\n                ul.appendChild(li);\r\n\r\n                this.createSubTreeNode(children, li);\r\n            } else {\r\n                let li = document.createElement('li');\r\n                li.className = 'ml-overlay-layer';\r\n                li.id = id;\r\n\r\n                let input = document.createElement('input');\r\n                input.type = 'checkbox';\r\n                input.name = 'ml-overlay-checkbox'\r\n                input.checked = 'checked';\r\n                this._checked[id] = true;\r\n\r\n                let label = document.createElement('label');\r\n                label.innerText = name ? name : id;\r\n\r\n                li.appendChild(input);\r\n                li.appendChild(label);\r\n                ul.appendChild(li);\r\n            }\r\n        }\r\n\r\n        parentli.appendChild(ul);\r\n    }\r\n\r\n    /**\r\n     * 添加basemap图层控件点击事件\r\n     */\r\n    addBasemapEvent() {\r\n        this._map.once('load', () => {\r\n            let basemapgroup = document.getElementById('ml-basemap-group');\r\n            basemapgroup.addEventListener('click', e => {\r\n                if (e.target.name === 'ml-basemap-radio') {\r\n                    this.changeBaseMap(e);\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 添加overlay图层控件点击事件\r\n     */\r\n    addOverlaysEvent() {\r\n        this._map.once('load', () => {\r\n            //overlay layer li\r\n            let liarr = document.getElementsByClassName('ml-overlay-layer');\r\n            for (let i = 0; i < liarr.length; i++) {\r\n                let li = liarr[i];\r\n                let layerId = li.id;\r\n\r\n                li.addEventListener('click', e => {\r\n                    if (e.target.type === 'checkbox') {\r\n                        let checked = e.target.checked;\r\n                        let visibility = checked ? 'visible' : 'none';\r\n                        this._map.setLayoutProperty(layerId, 'visibility', visibility);\r\n                        this._checked[layerId] = checked;\r\n\r\n                        let parentul = e.target.parentNode.parentNode;\r\n                        this.layerCheckboxChanged(parentul);\r\n                    }\r\n                })\r\n            }\r\n\r\n            // overlay layergroup li\r\n            let liarr2 = document.getElementsByClassName('ml-overlay-group');\r\n            for (let i = 0; i < liarr2.length; i++) {\r\n                let li = liarr2[i];\r\n                let inputList = li.querySelectorAll('input');\r\n                let rootinput = inputList[0];\r\n\r\n                rootinput.addEventListener('change', e => {\r\n                    for (let j = 1; j < inputList.length; j++) {\r\n                        let input = inputList[j];\r\n                        let checked = rootinput.checked;\r\n                        input.checked = checked;\r\n\r\n                        if (input.name === 'ml-overlay-checkbox') {\r\n                            let visibility = checked ? 'visible' : 'none';\r\n                            let layerId = input.parentNode.id;\r\n                            this._map.setLayoutProperty(layerId, 'visibility', visibility);\r\n                            this._checked[layerId] = checked;\r\n\r\n                            let parentul = e.target.parentNode.parentNode;\r\n                            this.layergroupCheckboxChanged(parentul);\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 切换basemap\r\n     * @param {Event} e \r\n     */\r\n    changeBaseMap(e) {\r\n        let mapstyle = e.target.id;\r\n        this._map.setStyle(mapstyle, { diff: false }); // todo: 此处有性能损失，待评估\r\n\r\n        this._map.once('style.load', () => {\r\n            for (let layerId in this._checked) {\r\n                let visibility = this._checked[layerId] ? 'visible' : 'none';\r\n                this._map.setLayoutProperty(layerId, 'visibility', visibility);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 递归实现：图层组节点控件改变时其父节点控件相应响应事件\r\n     * @param {HTMLElement} parentul - ul元素节点\r\n     * @returns \r\n     */\r\n    layergroupCheckboxChanged(parentul) {\r\n        if (parentul.name !== 'ml-parentul') return;\r\n\r\n        let inputlist = parentul.querySelectorAll('input');\r\n        let childCheckCount = 0;\r\n        for (let i = 0; i < inputlist.length; i++) {\r\n            if (inputlist[i].checked) {\r\n                childCheckCount++;\r\n            }\r\n        }\r\n\r\n        if (childCheckCount === 0) {\r\n            parentul.parentNode.children[1].checked = false;\r\n        } else if (childCheckCount === inputlist.length) {\r\n            parentul.parentNode.children[1].checked = true;\r\n        } else {\r\n            // todo: 子节点不全checked情况\r\n        }\r\n\r\n        this.layergroupCheckboxChanged(parentul.parentNode.parentNode);\r\n    }\r\n\r\n    /**\r\n     * 递归实现：图层节点控件改变时其父节点控件相应响应事件\r\n     * @param {HTMLElement}} parentul - ul元素节点\r\n     * @returns \r\n     */\r\n    layerCheckboxChanged(parentul) {\r\n        if (parentul.name !== 'ml-parentul') return;\r\n\r\n        let inputlist = parentul.querySelectorAll('input');\r\n        let childCheckCount = 0;\r\n        for (let i = 0; i < inputlist.length; i++) {\r\n            if (inputlist[i].checked) {\r\n                childCheckCount++;\r\n            }\r\n        }\r\n\r\n        if (childCheckCount === 0) {\r\n            parentul.parentNode.children[1].checked = false;\r\n        } else if (childCheckCount === inputlist.length) {\r\n            parentul.parentNode.children[1].checked = true;\r\n        } else {\r\n            // todo: 子节点不全checked情况\r\n        }\r\n\r\n        this.layerCheckboxChanged(parentul.parentNode.parentNode);\r\n    }\r\n}\r\n\r\nexport default TreeSwitcher1;","import defaultValue from '../utils/defaultValue.js';\r\nimport SimpleSwitcher1 from '../template/SimpleSwitcher1.js';\r\nimport SimpleSwitcher2 from '../template/SimpleSwitcher2.js';\r\nimport TreeSwitcher1 from '../template/TreeSwitcher1.js';\r\n\r\nclass MapboxLayerSwitcher {\r\n    constructor(options = {}) {\r\n        this._template = defaultValue(options.template, 'simple1');\r\n        this._layers = defaultValue(options.layers, []);\r\n        this._activemode = defaultValue(options.activemode, 'none');\r\n    }\r\n\r\n    onAdd(map) {\r\n        this._map = map;\r\n        this._container = document.createElement('div');\r\n\r\n        switch (this._template) {\r\n            case 'simple1':\r\n                new SimpleSwitcher1(this._map, this._container, this._layers, this._activemode);\r\n                break;\r\n            case 'simple2':\r\n                new SimpleSwitcher2(this._map, this._container, this._layers, this._activemode);\r\n                break;\r\n            case 'tree1':\r\n                new TreeSwitcher1(this._map, this._container, this._layers, this._activemode);\r\n                break;\r\n            default:\r\n                console.error('the template parameters are illegal!')\r\n        }\r\n\r\n        return this._container;\r\n    }\r\n\r\n    onRemove() {\r\n        this._container.parentNode.removeChild(this._container);\r\n        this._map = undefined;\r\n    }\r\n\r\n}\r\n\r\nexport default MapboxLayerSwitcher;"],"names":["styleInject","css","ref","head","insertAt","document","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","defaultValue","a","b","EMPTY_OBJECT","Object","freeze","SimpleSwitcher1","map","container","layers","activemode","_map","_container","_layers","_activemode","init","this","className","_panel","id","_panelContentStr","createLayerSwitcherBtn","layersClassify","createOverlaysPanel","createBasemapsPanel","innerHTML","addPanelEvent","_overlays","_basemaps","i","length","layer","push","_layerSwitcherBtn","layerSwitcherBtnClicKMode","layerSwitcherBtnMouseOverMode","addEventListener","_this","display","setAttribute","on","_this2","basemaps","name","_checked","overlays","once","getElementById","e","target","attributes","layertype","nodeValue","_this3","changeBaseMap","changeOverlaysVisible","_update","mapstyle","setStyle","layerId","_this4","visibility","setLayoutProperty","checked","SimpleSwitcher2","diff","alinkArrLike","parentNode","children","alink","TreeSwitcher1","_panelContent","addBasemapEvent","addOverlaysEvent","len","li","label","innerText","ul","listr","button","input","includes","classList","remove","add","createSubTreeNode","parentli","overlay","liarr","getElementsByClassName","_this5","parentul","layerCheckboxChanged","liarr2","inputList","querySelectorAll","rootinput","j","layergroupCheckboxChanged","_this6","inputlist","childCheckCount","options","_template","template","console","error","removeChild","undefined"],"mappings":"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"}